{
  "contractName": "VaultStandardAMM",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "Buyback",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "RevShare",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_govAddress",
          "type": "address"
        }
      ],
      "name": "SetGov",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_onlyGov",
          "type": "bool"
        }
      ],
      "name": "SetOnlyGov",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_entranceFeeFactor",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_withdrawFeeFactor",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_controllerFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_buyBackRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_revShareRate",
          "type": "uint256"
        }
      ],
      "name": "SetSettings",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_treasuryAddress",
          "type": "address"
        }
      ],
      "name": "SetTreasury",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_uniRouterAddress",
          "type": "address"
        }
      ],
      "name": "SetUniRouterAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ZORROAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "burnAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buyBackRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buyBackRateUL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "controllerFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "controllerFeeUL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultStablecoin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_wantAmt",
          "type": "uint256"
        }
      ],
      "name": "depositWantToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "sharesAdded",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dstGasForEarningsCall",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "earn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "earnedAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "entranceFeeFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "entranceFeeFactorLL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountUSD",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxMarketMovementAllowed",
          "type": "uint256"
        }
      ],
      "name": "exchangeUSDForWantToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "wantObtained",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxMarketMovementAllowed",
          "type": "uint256"
        }
      ],
      "name": "exchangeWantTokenForUSD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "usdObtained",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "farmContractAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeDenominator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "govAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "inCaseTokensGetStuck",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isHomeChain",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isLPFarmable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastEarnBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxMarketMovementAllowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "onlyGov",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "priceFeeds",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "principalDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "profitDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "revShareRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "revShareRateUL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_index",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "setContractAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "setDstGasForEarningsCall",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_entranceFeeFactor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_withdrawFeeFactor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_controllerFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_buyBackRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_revShareRate",
          "type": "uint256"
        }
      ],
      "name": "setFeeSettings",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_govAddress",
          "type": "address"
        }
      ],
      "name": "setGov",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_slippageNumerator",
          "type": "uint256"
        }
      ],
      "name": "setMaxMarketMovementAllowed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_onlyGov",
          "type": "bool"
        }
      ],
      "name": "setOnlyGov",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "setPid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_priceFeedAddress",
          "type": "address"
        }
      ],
      "name": "setPriceFeed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_path",
          "type": "address[]"
        }
      ],
      "name": "setSwapPaths",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sharesTotal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "swapPathLength",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "swapPaths",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token0Address",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token1Address",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultActions",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wantAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFeeFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFeeFactorLL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_shares",
          "type": "uint256"
        }
      ],
      "name": "withdrawWantToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "wantRemoved",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "zorroControllerAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "zorroLPPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "zorroLPPoolOtherToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "zorroStakingVault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "zorroXChainController",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_timelockOwner",
          "type": "address"
        },
        {
          "components": [
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "pid",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bool",
                      "name": "isHomeChain",
                      "type": "bool"
                    }
                  ],
                  "internalType": "struct IVault.VaultConfig",
                  "name": "config",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "govAddress",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "zorroControllerAddress",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "zorroXChainController",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "ZORROAddress",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "zorroStakingVault",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "wantAddress",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "token0Address",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "token1Address",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "earnedAddress",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "farmContractAddress",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "treasury",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "poolAddress",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "uniRouterAddress",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "zorroLPPool",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "zorroLPPoolOtherToken",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "defaultStablecoin",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "vaultActions",
                      "type": "address"
                    }
                  ],
                  "internalType": "struct IVault.VaultAddresses",
                  "name": "keyAddresses",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "address[]",
                      "name": "earnedToZORROPath",
                      "type": "address[]"
                    },
                    {
                      "internalType": "address[]",
                      "name": "earnedToToken0Path",
                      "type": "address[]"
                    },
                    {
                      "internalType": "address[]",
                      "name": "earnedToToken1Path",
                      "type": "address[]"
                    },
                    {
                      "internalType": "address[]",
                      "name": "stablecoinToToken0Path",
                      "type": "address[]"
                    },
                    {
                      "internalType": "address[]",
                      "name": "stablecoinToToken1Path",
                      "type": "address[]"
                    },
                    {
                      "internalType": "address[]",
                      "name": "earnedToZORLPPoolOtherTokenPath",
                      "type": "address[]"
                    },
                    {
                      "internalType": "address[]",
                      "name": "earnedToStablecoinPath",
                      "type": "address[]"
                    },
                    {
                      "internalType": "address[]",
                      "name": "stablecoinToZORROPath",
                      "type": "address[]"
                    },
                    {
                      "internalType": "address[]",
                      "name": "stablecoinToLPPoolOtherTokenPath",
                      "type": "address[]"
                    }
                  ],
                  "internalType": "struct IVault.VaultSwapPaths",
                  "name": "swapPaths",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "controllerFee",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "buyBackRate",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "revShareRate",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "entranceFeeFactor",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "withdrawFeeFactor",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct IVault.VaultFees",
                  "name": "fees",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "token0PriceFeed",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "token1PriceFeed",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "earnTokenPriceFeed",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "ZORPriceFeed",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "lpPoolOtherTokenPriceFeed",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "stablecoinPriceFeed",
                      "type": "address"
                    }
                  ],
                  "internalType": "struct IVault.VaultPriceFeeds",
                  "name": "priceFeeds",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "dstGasForEarningsCall",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IVault.VaultBaseInit",
              "name": "baseInit",
              "type": "tuple"
            },
            {
              "internalType": "bool",
              "name": "isLPFarmable",
              "type": "bool"
            }
          ],
          "internalType": "struct IVaultStandardAMM.VaultStandardAMMInit",
          "name": "_initValue",
          "type": "tuple"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_isFarmable",
          "type": "bool"
        }
      ],
      "name": "setIsFarmable",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "farm",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingFarmRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pendingRewards",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Buyback\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"RevShare\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_govAddress\",\"type\":\"address\"}],\"name\":\"SetGov\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_onlyGov\",\"type\":\"bool\"}],\"name\":\"SetOnlyGov\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_entranceFeeFactor\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_withdrawFeeFactor\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_controllerFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_buyBackRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_revShareRate\",\"type\":\"uint256\"}],\"name\":\"SetSettings\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_treasuryAddress\",\"type\":\"address\"}],\"name\":\"SetTreasury\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_uniRouterAddress\",\"type\":\"address\"}],\"name\":\"SetUniRouterAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ZORROAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBackRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBackRateUL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controllerFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controllerFeeUL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultStablecoin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_wantAmt\",\"type\":\"uint256\"}],\"name\":\"depositWantToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sharesAdded\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dstGasForEarningsCall\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earnedAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"entranceFeeFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"entranceFeeFactorLL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxMarketMovementAllowed\",\"type\":\"uint256\"}],\"name\":\"exchangeUSDForWantToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"wantObtained\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxMarketMovementAllowed\",\"type\":\"uint256\"}],\"name\":\"exchangeWantTokenForUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"usdObtained\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"farm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"farmContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"govAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"inCaseTokensGetStuck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_timelockOwner\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isHomeChain\",\"type\":\"bool\"}],\"internalType\":\"struct IVault.VaultConfig\",\"name\":\"config\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"govAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"zorroControllerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"zorroXChainController\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ZORROAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"zorroStakingVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wantAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token0Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"earnedAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"farmContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"uniRouterAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"zorroLPPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"zorroLPPoolOtherToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"defaultStablecoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vaultActions\",\"type\":\"address\"}],\"internalType\":\"struct IVault.VaultAddresses\",\"name\":\"keyAddresses\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"earnedToZORROPath\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"earnedToToken0Path\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"earnedToToken1Path\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"stablecoinToToken0Path\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"stablecoinToToken1Path\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"earnedToZORLPPoolOtherTokenPath\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"earnedToStablecoinPath\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"stablecoinToZORROPath\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"stablecoinToLPPoolOtherTokenPath\",\"type\":\"address[]\"}],\"internalType\":\"struct IVault.VaultSwapPaths\",\"name\":\"swapPaths\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"controllerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyBackRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"revShareRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"entranceFeeFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawFeeFactor\",\"type\":\"uint256\"}],\"internalType\":\"struct IVault.VaultFees\",\"name\":\"fees\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token0PriceFeed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1PriceFeed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"earnTokenPriceFeed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ZORPriceFeed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lpPoolOtherTokenPriceFeed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stablecoinPriceFeed\",\"type\":\"address\"}],\"internalType\":\"struct IVault.VaultPriceFeeds\",\"name\":\"priceFeeds\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"dstGasForEarningsCall\",\"type\":\"uint256\"}],\"internalType\":\"struct IVault.VaultBaseInit\",\"name\":\"baseInit\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"isLPFarmable\",\"type\":\"bool\"}],\"internalType\":\"struct IVaultStandardAMM.VaultStandardAMMInit\",\"name\":\"_initValue\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isHomeChain\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLPFarmable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastEarnBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMarketMovementAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onlyGov\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingFarmRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pendingRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"priceFeeds\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"principalDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"profitDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revShareRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revShareRateUL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_index\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setDstGasForEarningsCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_entranceFeeFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawFeeFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_controllerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyBackRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_revShareRate\",\"type\":\"uint256\"}],\"name\":\"setFeeSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_govAddress\",\"type\":\"address\"}],\"name\":\"setGov\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isFarmable\",\"type\":\"bool\"}],\"name\":\"setIsFarmable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_slippageNumerator\",\"type\":\"uint256\"}],\"name\":\"setMaxMarketMovementAllowed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_onlyGov\",\"type\":\"bool\"}],\"name\":\"setOnlyGov\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"setPid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceFeedAddress\",\"type\":\"address\"}],\"name\":\"setPriceFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"}],\"name\":\"setSwapPaths\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sharesTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"swapPathLength\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"swapPaths\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultActions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wantAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFeeFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFeeFactorLL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"withdrawWantToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"wantRemoved\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zorroControllerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zorroLPPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zorroLPPoolOtherToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zorroStakingVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zorroXChainController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"depositWantToken(uint256)\":{\"params\":{\"_wantAmt\":\"amount of underlying token to deposit/stake\"},\"returns\":{\"sharesAdded\":\"uint256 Number of shares added\"}},\"exchangeUSDForWantToken(uint256,uint256)\":{\"params\":{\"_amountUSD\":\"Amount of USD to exchange\",\"_maxMarketMovementAllowed\":\"Slippage (990 = 1%)\"},\"returns\":{\"wantObtained\":\"The amount of Want token returned\"}},\"exchangeWantTokenForUSD(uint256,uint256)\":{\"params\":{\"_amount\":\"Amount of want to exchange\",\"_maxMarketMovementAllowed\":\"Slippage (990 = 1%)\"},\"returns\":{\"usdObtained\":\"The amount of USD token returned\"}},\"inCaseTokensGetStuck(address,uint256,address)\":{\"params\":{\"_amount\":\"The amount of the tokens to transfer\",\"_to\":\"The address to transfer tokens to\",\"_token\":\"Address of the ERC20 token to transfer\"}},\"initialize(address,(((uint256,bool),(address,address,address,address,address,address,address,address,address,address,address,address,address,address,address,address,address),(address[],address[],address[],address[],address[],address[],address[],address[],address[]),(uint256,uint256,uint256,uint256,uint256),(address,address,address,address,address,address),uint256),bool))\":{\"params\":{\"_initValue\":\"A VaultStandardAMMInit struct with all constructor params\",\"_timelockOwner\":\"The designated timelock controller address to act as owner\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"pendingFarmRewards()\":{\"details\":\"Every protocol has a different function name for this, so the implementing contract must conform to this abstraction\",\"returns\":{\"pendingRewards\":\"The quantity of rewards tokens available for harvest\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setFeeSettings(uint256,uint256,uint256,uint256,uint256)\":{\"params\":{\"_buyBackRate\":\"Buy back rate fee numerator\",\"_controllerFee\":\"Controller fee numerator\",\"_entranceFeeFactor\":\"Entrance fee numerator (higher means smaller percentage)\",\"_revShareRate\":\"Rev share rate fee numerator\",\"_withdrawFeeFactor\":\"Withdrawal fee numerator (higher means smaller percentage)\"}},\"setGov(address)\":{\"params\":{\"_govAddress\":\"The new gov address\"}},\"setOnlyGov(bool)\":{\"params\":{\"_onlyGov\":\"whether onlyGov should be enforced\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawWantToken(uint256)\":{\"params\":{\"_shares\":\"The number of shares to withdraw\"},\"returns\":{\"wantRemoved\":\"The amount of Want tokens withdrawn\"}}},\"title\":\"VaultStandardAMM: abstract base class for all PancakeSwap style AMM contracts. Maximizes yield in AMM.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"depositWantToken(uint256)\":{\"notice\":\"Receives new deposits from user\"},\"earn()\":{\"notice\":\"The main compounding (earn) function. Reinvests profits since the last earn event.\"},\"exchangeUSDForWantToken(uint256,uint256)\":{\"notice\":\"Converts USD to Want token and delivers back to this contract\"},\"exchangeWantTokenForUSD(uint256,uint256)\":{\"notice\":\"Converts Want token to USD and delivers back to this contract\"},\"farm()\":{\"notice\":\"Public function for farming Want token.\"},\"inCaseTokensGetStuck(address,uint256,address)\":{\"notice\":\"Safely transfer ERC20 tokens stuck in this contract to a specified address\"},\"initialize(address,(((uint256,bool),(address,address,address,address,address,address,address,address,address,address,address,address,address,address,address,address,address),(address[],address[],address[],address[],address[],address[],address[],address[],address[]),(uint256,uint256,uint256,uint256,uint256),(address,address,address,address,address,address),uint256),bool))\":{\"notice\":\"Upgradeable constructor\"},\"pause()\":{\"notice\":\"Pause contract\"},\"pendingFarmRewards()\":{\"notice\":\"Fetches the pending rewards from the underlying protocol's MasterChef contract\"},\"setFeeSettings(uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"Configure key fee parameters\"},\"setGov(address)\":{\"notice\":\"Set governor address\"},\"setOnlyGov(bool)\":{\"notice\":\"Set onlyGov property\"},\"unpause()\":{\"notice\":\"Unpause contract\"},\"withdrawWantToken(uint256)\":{\"notice\":\"Fully withdraw Want tokens from the Farm contract (100% withdrawals only)\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"project:/contracts/vaults/_VaultStandardAMM.sol\":\"VaultStandardAMM\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6c1f59e0c7334c22fb54288728fc32546bdc9c8133d6db0d60223e3c28f52120\",\"dweb:/ipfs/QmeuxawUVBhMWQJXaEhhnubCTc4Jwn5wYK8gbhq6NjrpfG\"]},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://98c7bba29bcab7240cdaada7dd7cbe3529fec83314801270c46239e72a9e84d7\",\"dweb:/ipfs/QmfHCc1KMygjXchXVwafWTkFjhbb2SQ3Cu5GzRTdV4CCCh\"]},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://88b812365459a042c2aab5c689ff723098e0e19cb372718d3dd028b3c406e4f6\",\"dweb:/ipfs/QmTsLrMYzPjnB85pyAy85NNcBg64RPVueJARzwNg9xMyR1\"]},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"keccak256\":\"0x041af89e5e60b74e1203d5a34614c9de379726f52ecb8cf064cab78b9fdcdf9d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a8e235e33979e564ee560e5e7c42f3d4c309698eae7b7035aaf65b0ce6253f9\",\"dweb:/ipfs/QmQKdNPLcgR6LLtS9vDRXy8jeD7gCZDTfctXiTwu6HN7M1\"]},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://607818f1b44548c2d8268176f73cdb290e1faed971b1061930d92698366e2a11\",\"dweb:/ipfs/QmQibMe3r5no95b6q7isGT5R75V8xSofWEDLXzp95b7LgZ\"]},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"keccak256\":\"0x7160017c8d2373a33a6d7e45368d60d7d582ea1695a098de8356c94dab2ec3ce\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9057befea40d1fc42ccb4a6d3d8428e8e1a21c3f08bf7032a280049b0167b145\",\"dweb:/ipfs/QmQx7oAxLJs17wcG2pZN4PW9xKgo7AW92SttiJ7dWCGmTt\"]},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"keccak256\":\"0x6777f3fccb5dab95a9088ef62c41bee0198fd92e50d7c94f0e3733788af4079e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bf67f82ba68e13b306fa350fc0e2acaac3b0e90b2734a56e61302d79b408fb0b\",\"dweb:/ipfs/QmVhMTANFDtZFpxdGk6SayfttDxEh23GrT8ttiFRoow7c2\"]},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4c9c634f99dd02d73ce7498b03a6305e251c05eeebb71457306561c1fab0fa7d\",\"dweb:/ipfs/QmbYRBbZHy8YoaQKXdPryiL3CSS7uUaRfRYi1TUj9cTqJQ\"]},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ca7bd5deecc4abd97f0218708c6e004953971cc62de68557fe0c6c8607f85a65\",\"dweb:/ipfs/QmRw3dGdS6ksHZiqcPRknYvWXfYP2hTj21PhkLjXyEVEf6\"]},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://37e4df53c8d2e3c1062c1c7b2c17366db7de03bfd2559d340ca95c588aa49c2f\",\"dweb:/ipfs/QmQ9vsG3o4wED3FRogiSUhdzJvZSjjYFtydzXvFEJtgZk4\"]},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d6520943ea55fdf5f0bafb39ed909f64de17051bc954ff3e88c9e5621412c79c\",\"dweb:/ipfs/QmWZ4rAKTQbNG2HxGs46AcTXShsVytKeLs7CUCdCSv5N7a\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://87a7a5d2f6f63f84598af02b8c50ca2df2631cb8ba2453e8d95fcb17e4be9824\",\"dweb:/ipfs/QmR76hqtAcRqoFj33tmNjcWTLrgNsAaakYwnKZ8zoJtKei\"]},\"project:/contracts/interfaces/Alpaca/IAlpacaFairLaunch.sol\":{\"keccak256\":\"0xad81b0d4cffbce6e128843526c96ecea39b08242731eae4a52d032c64b00bb15\",\"license\":\"BUSL\",\"urls\":[\"bzz-raw://4ef4e8c6eb328a981308a37bf9850f18088febf7638b9e6e818ec6e8ebdfda54\",\"dweb:/ipfs/QmP482RAFoGhWC2Tyg93DVSHYuEcfeFeEZUua9aqxKy6X1\"]},\"project:/contracts/interfaces/Alpaca/IAlpacaVault.sol\":{\"keccak256\":\"0xabcbe1bf75a6a076a4c895f72562bb94e2dc082699bbc5b4e7cde1148667ad57\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6d96ad7765a52458ca06c56d90fdbc667ee581cc913562ac32008dd4d762dbcf\",\"dweb:/ipfs/QmbBK7B9KsFPu9hPVDMvPBM5um1TivCYH6AwtmPKrASgCG\"]},\"project:/contracts/interfaces/LayerZero/ILayerZeroReceiver.sol\":{\"keccak256\":\"0xbb12f15bdc0ec9cc0aaf509b0252afc0714207c56998dab83c62ffd4a63ae70e\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://8e1f2b57c72757daf5c15ab43f17d232b3323376872ef814d31cff34105438b1\",\"dweb:/ipfs/QmWh1ruhTbYGnaQ1RXWUe84uKXXhTJuRiN485ZRcA48XLz\"]},\"project:/contracts/interfaces/PancakeSwap/IMasterChef.sol\":{\"keccak256\":\"0xd93acd89fcffc02c54a8f6cab79adc22bfa7b8de6ccc5ce4fa15855d4c8d01e9\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://934fe72e40a7402d94bd8da696fd6dcab7a16b7014e5b39e7b2f8ee81d4f4c93\",\"dweb:/ipfs/Qme23kAU1PLvoK7ViSMur2CP4ByG7tiurd6Gy6mHM2VUn5\"]},\"project:/contracts/interfaces/Stargate/IStargateReceiver.sol\":{\"keccak256\":\"0x44c6f3e0eab72f4fa27f83ef133d9648ee4bf2a5a2057756d96196adeba0339e\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://d905d65bb9ce0164d2a536956fcc981ddabf3bd0a23cdfcd7c54799e86d82ac3\",\"dweb:/ipfs/QmfU8Jq48az6VeGgY3h6CYBXakvv6NGp7RsANmZcDjWZDg\"]},\"project:/contracts/interfaces/Uniswap/IAMMFarm.sol\":{\"keccak256\":\"0x5e85429340f1d5d2408b40f6525d47c3b4796f4ca2da31b2a4cb1c29b0cb1a2f\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://9d488f8dfc51e6e80d8cd5641cc418ecab09f6cb87bc0e4d78d13dc683f3230d\",\"dweb:/ipfs/QmQ9WcPF5hGzkraVDYGHTzs3nGW53qam4Pb3vVifTA6eyn\"]},\"project:/contracts/interfaces/Uniswap/IAMMRouter01.sol\":{\"keccak256\":\"0xedff0a1c8dd8eac392692f031406c459891a88a09d996629e3a56a9b8e003915\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://7bb31e6c73608c55b6a40f6a4ccb4d592acb6f402fad3b12e78f6314e6da491e\",\"dweb:/ipfs/QmVTMhwncB1MwGJabKKtfcRzyHtnkueAx8XrB4yLrv6Xci\"]},\"project:/contracts/interfaces/Uniswap/IAMMRouter02.sol\":{\"keccak256\":\"0x6ff071388c7b300cb602534f249a4a1e63e97ae3870945ebc477d8cf03d36e24\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://32dbfb0f88caff1dc0859b430d30b9bc8c301ce073d26d3c1d92eea481007d12\",\"dweb:/ipfs/QmP8giHQSDYVt9qxyMjnVawFCi8gTCrgCKhZrywiwCiZ9x\"]},\"project:/contracts/interfaces/Zorro/Controllers/IZorroControllerXChain.sol\":{\"keccak256\":\"0x04cbcfb52bc9cea8eb45b6a18ff9fabdc18a14dd5c0c67ff71699387b4348921\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1f05ffb6cc50c164fd6d91156a085edec7e18bccd852bef614853f69cbc63c46\",\"dweb:/ipfs/QmY7KtmBAbUMM8uUUZetV3g77oJCJ2xaJSTQFCEDn7rtgH\"]},\"project:/contracts/interfaces/Zorro/Vaults/Actions/IVaultActions.sol\":{\"keccak256\":\"0x70a52bf5d20e14c3166bc53704266eb74c7fdc15919d365dd6dfb17771769787\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5c6bd33631992ac2f080a59e41879d3ae50c47162f7cfd7b011d0ba1891d0afa\",\"dweb:/ipfs/QmSWxVJod4LTVPpAsTmRnRfDwZA3FVbnXBAkoHqgQVR4h4\"]},\"project:/contracts/interfaces/Zorro/Vaults/Actions/IVaultActionsStandardAMM.sol\":{\"keccak256\":\"0xa6b2bab5a8094eed0c6b322b2b8db53e6f05185bcfc742cda75510f024b8fda6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b45e0055e822818e397f86b84087bb7164248267b21e8da5aea3b2b35f9b8232\",\"dweb:/ipfs/QmURetqXG8feTf8SMtHAdJkhWTtuv4skNz2gFpLRudJW7e\"]},\"project:/contracts/interfaces/Zorro/Vaults/IVault.sol\":{\"keccak256\":\"0x3887d6cae468fb194fa98a78db9f38c45a794661b399ea8ac938157070932a38\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8154843e23e63725123b90e43bd6e61b107592c70e7c5f30154c6b66723e5b6f\",\"dweb:/ipfs/QmcWbttA3q5PxH11hgHuYQ5yf6rx3AB8LfedGMZxfqxsNY\"]},\"project:/contracts/interfaces/Zorro/Vaults/IVaultStandardAMM.sol\":{\"keccak256\":\"0x87dd82823d555f5350c9de96ca51d9aceb964fb4d8c69ac53aaa5ee06e9d9ebe\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e33f604c52caabee3a2a42f09e09f95757c591c17cb29009b128c839c9b45ba1\",\"dweb:/ipfs/QmdTipeuQ8SJy7eteZotkF5RBvpKNcdtfmzuN7MqPmKjNC\"]},\"project:/contracts/libraries/PriceFeed.sol\":{\"keccak256\":\"0xbc01335b64576076e0a43c0be771c89ccb5363b426521ce379f560e9d30cfe94\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://03d5bf8cb030a15ef51faf151654a2ffb2dabfeef04d56079a04289acc139317\",\"dweb:/ipfs/QmYGZw4JJPM4nxcWQzZKsrq8SuDW29Ye4c7enTaEsX1rpi\"]},\"project:/contracts/libraries/SafeSwap.sol\":{\"keccak256\":\"0x12474ac6678158bda55a1ce0fb982a920253ab3b72084bb8b3219f1bbdf66a02\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a157fa3130e187f4354a5398eb8271ba2733642b3e7e49bfd51d24de874d6c25\",\"dweb:/ipfs/QmXT3Z4rEHhJLzVZpccJeseefLQXkxXRcvc76KhvSDby68\"]},\"project:/contracts/vaults/_VaultBase.sol\":{\"keccak256\":\"0xef9248b8bdc9852334014d7043259a4259f4b20e3598274bafda8c8eb1a68766\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1db3c29acdb61956da502a97aa9c0a5d5dbf94ae0122d0dfb60d0dcf886a05b3\",\"dweb:/ipfs/QmYwgMncwpFs3jr7PZ83eCZdmynTN1CrzcXLqVV913rDZE\"]},\"project:/contracts/vaults/_VaultStandardAMM.sol\":{\"keccak256\":\"0xec526702c1a6ed32e336d9ec3d974d6472ac7c212c8f1979e0073bf18d63e9d0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5965a839511842ae7b439cf7e77143e3bff86449e8009aaa27da991bfbe1075d\",\"dweb:/ipfs/QmagNzuSiJUvTFg66tNzXYVZtXj4af2mEsGFaaRUv2Fkbk\"]},\"project:/contracts/vaults/actions/_VaultActions.sol\":{\"keccak256\":\"0x78da71748f7d482bff3193983500338367e1f81181135993467aa1357d63eb6a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ac57b934ddd967960ed5128298a2d2e0be9bbb0e8c01deb8062ba7a42aca6759\",\"dweb:/ipfs/QmZJHAQfnUoRYjCXqrm2dD6m76v4WRVs2RtzuxBk8JoVzJ\"]},\"project:/contracts/vaults/actions/_VaultActionsStandardAMM.sol\":{\"keccak256\":\"0x59528f776874324f35d317f12fade1716584c341a6f079e1ad29fbc112c1a45f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e95519d409f7506afe9a057a0b5d424ca74a08de713e4010da49166591613cdf\",\"dweb:/ipfs/QmPotu7PpxUJCnkEjzXgXHMTstUeySXEfVJNXHwEdEMo6S\"]}},\"version\":1}",
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "immutableReferences": {},
  "generatedSources": [],
  "deployedGeneratedSources": [],
  "sourceMap": "",
  "deployedSourceMap": "",
  "source": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\";\n\nimport \"../interfaces/Uniswap/IAMMFarm.sol\";\n\nimport \"../interfaces/Zorro/Vaults/IVaultStandardAMM.sol\";\n\nimport \"./actions/_VaultActionsStandardAMM.sol\";\n\nimport \"./_VaultBase.sol\";\n\n/// @title VaultStandardAMM: abstract base class for all PancakeSwap style AMM contracts. Maximizes yield in AMM.\nabstract contract VaultStandardAMM is IVaultStandardAMM, VaultBase {\n    /* Libraries */\n\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n    using PriceFeed for AggregatorV3Interface;\n\n    /* Constructor */\n\n    /// @notice Upgradeable constructor\n    /// @param _initValue A VaultStandardAMMInit struct with all constructor params\n    /// @param _timelockOwner The designated timelock controller address to act as owner\n    function initialize(\n        address _timelockOwner,\n        VaultStandardAMMInit memory _initValue\n    ) public initializer {\n        // Vault config\n        isLPFarmable = _initValue.isLPFarmable;\n\n        // Super call\n        _initialize(_timelockOwner, _initValue.baseInit);\n    }\n\n    /* State */\n\n    bool public isLPFarmable; // If true, will farm LP tokens\n\n    /* Setters */\n\n    function setIsFarmable(bool _isFarmable) external onlyOwner {\n        isLPFarmable = _isFarmable;\n    }\n\n    /* Investment Actions */\n\n    /// @notice Public function for farming Want token.\n    function farm() public nonReentrant {\n        _farm();\n    }\n\n    /// @notice Internal function for farming Want token. Responsible for staking Want token in a MasterChef/MasterApe-like contract\n    function _farm() internal override {\n        if (isLPFarmable) {\n            // Get the Want token stored on this contract\n            uint256 wantBal = IERC20Upgradeable(wantAddress).balanceOf(\n                address(this)\n            );\n\n            // Allow the farm contract (e.g. MasterChef/MasterApe) the ability to transfer up to the Want amount\n            IERC20Upgradeable(wantAddress).safeIncreaseAllowance(\n                farmContractAddress,\n                wantBal\n            );\n\n            // Deposit the Want tokens in the Farm contract for the appropriate pool ID (PID)\n            IAMMFarm(farmContractAddress).deposit(pid, wantBal);\n        }\n    }\n\n    /// @notice Internal function for unfarming Want token. Responsible for unstaking Want token from MasterChef/MasterApe contracts\n    /// @param _wantAmt the amount of Want tokens to withdraw. If 0, will only harvest and not withdraw\n    function _unfarm(uint256 _wantAmt) internal override {\n        if (isLPFarmable) {\n            // Withdraw the Want tokens from the Farm contract pool\n            IAMMFarm(farmContractAddress).withdraw(pid, _wantAmt);\n        }\n    }\n\n    /* Abstract Functions */\n\n    /// @notice Fetches the pending rewards from the underlying protocol's MasterChef contract\n    /// @dev Every protocol has a different function name for this, so the implementing contract must conform to this abstraction\n    /// @return pendingRewards The quantity of rewards tokens available for harvest\n    function pendingFarmRewards() public view virtual returns (uint256 pendingRewards);\n}\n\nimport \"../interfaces/PancakeSwap/IMasterChef.sol\"; \n\ncontract PCS_ZOR_BNB is VaultStandardAMM {\n    function pendingFarmRewards() public view override returns (uint256 pendingRewards) {\n        pendingRewards = IPCSMasterChef(farmContractAddress).pendingCake(pid, address(this));\n    }\n}\n",
  "sourcePath": "/Users/kristophm/Documents/workspace/zorro-protocol/contracts/vaults/_VaultStandardAMM.sol",
  "ast": {
    "absolutePath": "project:/contracts/vaults/_VaultStandardAMM.sol",
    "exportedSymbols": {
      "AddressUpgradeable": [
        3127
      ],
      "AggregatorV3Interface": [
        45
      ],
      "ContextUpgradeable": [
        3169
      ],
      "ERC20Upgradeable": [
        2557
      ],
      "IAMMFarm": [
        14085
      ],
      "IAMMRouter01": [
        14393
      ],
      "IAMMRouter02": [
        14481
      ],
      "IAlpacaVault": [
        12574
      ],
      "IERC20": [
        4955
      ],
      "IERC20MetadataUpgradeable": [
        2660
      ],
      "IERC20Upgradeable": [
        2635
      ],
      "IFairLaunch": [
        12539
      ],
      "ILayerZeroReceiver": [
        12836
      ],
      "IPCSMasterChef": [
        13103
      ],
      "IStargateReceiver": [
        13440
      ],
      "IVault": [
        16339
      ],
      "IVaultActions": [
        15872
      ],
      "IVaultActionsStandardAMM": [
        16031
      ],
      "IVaultStandardAMM": [
        16471
      ],
      "IZorroControllerXChain": [
        15659
      ],
      "IZorroControllerXChainBase": [
        15474
      ],
      "IZorroControllerXChainDeposit": [
        15510
      ],
      "IZorroControllerXChainEarn": [
        15580
      ],
      "IZorroControllerXChainReceiver": [
        15647
      ],
      "IZorroControllerXChainWithdraw": [
        15635
      ],
      "Initializable": [
        1774
      ],
      "OwnableUpgradeable": [
        571
      ],
      "PCS_ZOR_BNB": [
        21780
      ],
      "PausableUpgradeable": [
        1885
      ],
      "PriceFeed": [
        16609
      ],
      "ReentrancyGuardUpgradeable": [
        1944
      ],
      "SafeERC20Upgradeable": [
        2884
      ],
      "SafeSwapUni": [
        16815
      ],
      "VaultActions": [
        24121
      ],
      "VaultActionsStandardAMM": [
        25791
      ],
      "VaultBase": [
        20840
      ],
      "VaultStandardAMM": [
        21756
      ]
    },
    "id": 21781,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 21628,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "33:23:120"
      },
      {
        "absolutePath": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol",
        "file": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol",
        "id": 21629,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 21781,
        "sourceUnit": 3128,
        "src": "58:74:120",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "project:/contracts/interfaces/Uniswap/IAMMFarm.sol",
        "file": "../interfaces/Uniswap/IAMMFarm.sol",
        "id": 21630,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 21781,
        "sourceUnit": 14086,
        "src": "134:44:120",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "project:/contracts/interfaces/Zorro/Vaults/IVaultStandardAMM.sol",
        "file": "../interfaces/Zorro/Vaults/IVaultStandardAMM.sol",
        "id": 21631,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 21781,
        "sourceUnit": 16472,
        "src": "180:58:120",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "project:/contracts/vaults/actions/_VaultActionsStandardAMM.sol",
        "file": "./actions/_VaultActionsStandardAMM.sol",
        "id": 21632,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 21781,
        "sourceUnit": 25792,
        "src": "240:48:120",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "project:/contracts/vaults/_VaultBase.sol",
        "file": "./_VaultBase.sol",
        "id": 21633,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 21781,
        "sourceUnit": 20841,
        "src": "290:26:120",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": true,
        "baseContracts": [
          {
            "baseName": {
              "id": 21635,
              "name": "IVaultStandardAMM",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 16471,
              "src": "470:17:120"
            },
            "id": 21636,
            "nodeType": "InheritanceSpecifier",
            "src": "470:17:120"
          },
          {
            "baseName": {
              "id": 21637,
              "name": "VaultBase",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 20840,
              "src": "489:9:120"
            },
            "id": 21638,
            "nodeType": "InheritanceSpecifier",
            "src": "489:9:120"
          }
        ],
        "canonicalName": "VaultStandardAMM",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 21634,
          "nodeType": "StructuredDocumentation",
          "src": "318:114:120",
          "text": "@title VaultStandardAMM: abstract base class for all PancakeSwap style AMM contracts. Maximizes yield in AMM."
        },
        "fullyImplemented": false,
        "id": 21756,
        "linearizedBaseContracts": [
          21756,
          20840,
          1885,
          1944,
          571,
          3169,
          1774,
          16471,
          16339
        ],
        "name": "VaultStandardAMM",
        "nameLocation": "450:16:120",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "id": 21642,
            "libraryName": {
              "id": 21639,
              "name": "SafeERC20Upgradeable",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 2884,
              "src": "532:20:120"
            },
            "nodeType": "UsingForDirective",
            "src": "526:49:120",
            "typeName": {
              "id": 21641,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 21640,
                "name": "IERC20Upgradeable",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 2635,
                "src": "557:17:120"
              },
              "referencedDeclaration": 2635,
              "src": "557:17:120",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_IERC20Upgradeable_$2635",
                "typeString": "contract IERC20Upgradeable"
              }
            }
          },
          {
            "id": 21646,
            "libraryName": {
              "id": 21643,
              "name": "PriceFeed",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 16609,
              "src": "586:9:120"
            },
            "nodeType": "UsingForDirective",
            "src": "580:42:120",
            "typeName": {
              "id": 21645,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 21644,
                "name": "AggregatorV3Interface",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 45,
                "src": "600:21:120"
              },
              "referencedDeclaration": 45,
              "src": "600:21:120",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_AggregatorV3Interface_$45",
                "typeString": "contract AggregatorV3Interface"
              }
            }
          },
          {
            "body": {
              "id": 21668,
              "nodeType": "Block",
              "src": "989:160:120",
              "statements": [
                {
                  "expression": {
                    "id": 21660,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 21657,
                      "name": "isLPFarmable",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 21671,
                      "src": "1023:12:120",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "expression": {
                        "id": 21658,
                        "name": "_initValue",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 21652,
                        "src": "1038:10:120",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_VaultStandardAMMInit_$16460_memory_ptr",
                          "typeString": "struct IVaultStandardAMM.VaultStandardAMMInit memory"
                        }
                      },
                      "id": 21659,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "isLPFarmable",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 16459,
                      "src": "1038:23:120",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "1023:38:120",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 21661,
                  "nodeType": "ExpressionStatement",
                  "src": "1023:38:120"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 21663,
                        "name": "_timelockOwner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 21649,
                        "src": "1106:14:120",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "expression": {
                          "id": 21664,
                          "name": "_initValue",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 21652,
                          "src": "1122:10:120",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_VaultStandardAMMInit_$16460_memory_ptr",
                            "typeString": "struct IVaultStandardAMM.VaultStandardAMMInit memory"
                          }
                        },
                        "id": 21665,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "baseInit",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 16457,
                        "src": "1122:19:120",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_VaultBaseInit_$16064_memory_ptr",
                          "typeString": "struct IVault.VaultBaseInit memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_struct$_VaultBaseInit_$16064_memory_ptr",
                          "typeString": "struct IVault.VaultBaseInit memory"
                        }
                      ],
                      "id": 21662,
                      "name": "_initialize",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 19809,
                      "src": "1094:11:120",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_struct$_VaultBaseInit_$16064_memory_ptr_$returns$__$",
                        "typeString": "function (address,struct IVault.VaultBaseInit memory)"
                      }
                    },
                    "id": 21666,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1094:48:120",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 21667,
                  "nodeType": "ExpressionStatement",
                  "src": "1094:48:120"
                }
              ]
            },
            "documentation": {
              "id": 21647,
              "nodeType": "StructuredDocumentation",
              "src": "651:208:120",
              "text": "@notice Upgradeable constructor\n @param _initValue A VaultStandardAMMInit struct with all constructor params\n @param _timelockOwner The designated timelock controller address to act as owner"
            },
            "functionSelector": "92223c35",
            "id": 21669,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 21655,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 21654,
                  "name": "initializer",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 1748,
                  "src": "977:11:120"
                },
                "nodeType": "ModifierInvocation",
                "src": "977:11:120"
              }
            ],
            "name": "initialize",
            "nameLocation": "873:10:120",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 21653,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 21649,
                  "mutability": "mutable",
                  "name": "_timelockOwner",
                  "nameLocation": "901:14:120",
                  "nodeType": "VariableDeclaration",
                  "scope": 21669,
                  "src": "893:22:120",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 21648,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "893:7:120",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 21652,
                  "mutability": "mutable",
                  "name": "_initValue",
                  "nameLocation": "953:10:120",
                  "nodeType": "VariableDeclaration",
                  "scope": 21669,
                  "src": "925:38:120",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_VaultStandardAMMInit_$16460_memory_ptr",
                    "typeString": "struct IVaultStandardAMM.VaultStandardAMMInit"
                  },
                  "typeName": {
                    "id": 21651,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 21650,
                      "name": "VaultStandardAMMInit",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 16460,
                      "src": "925:20:120"
                    },
                    "referencedDeclaration": 16460,
                    "src": "925:20:120",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_VaultStandardAMMInit_$16460_storage_ptr",
                      "typeString": "struct IVaultStandardAMM.VaultStandardAMMInit"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "883:86:120"
            },
            "returnParameters": {
              "id": 21656,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "989:0:120"
            },
            "scope": 21756,
            "src": "864:285:120",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              16465
            ],
            "constant": false,
            "functionSelector": "37f0aa4e",
            "id": 21671,
            "mutability": "mutable",
            "name": "isLPFarmable",
            "nameLocation": "1184:12:120",
            "nodeType": "VariableDeclaration",
            "scope": 21756,
            "src": "1172:24:120",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bool",
              "typeString": "bool"
            },
            "typeName": {
              "id": 21670,
              "name": "bool",
              "nodeType": "ElementaryTypeName",
              "src": "1172:4:120",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "visibility": "public"
          },
          {
            "body": {
              "id": 21682,
              "nodeType": "Block",
              "src": "1314:43:120",
              "statements": [
                {
                  "expression": {
                    "id": 21680,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 21678,
                      "name": "isLPFarmable",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 21671,
                      "src": "1324:12:120",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 21679,
                      "name": "_isFarmable",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 21673,
                      "src": "1339:11:120",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "1324:26:120",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 21681,
                  "nodeType": "ExpressionStatement",
                  "src": "1324:26:120"
                }
              ]
            },
            "functionSelector": "83f01939",
            "id": 21683,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 21676,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 21675,
                  "name": "onlyOwner",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 508,
                  "src": "1304:9:120"
                },
                "nodeType": "ModifierInvocation",
                "src": "1304:9:120"
              }
            ],
            "name": "setIsFarmable",
            "nameLocation": "1263:13:120",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 21674,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 21673,
                  "mutability": "mutable",
                  "name": "_isFarmable",
                  "nameLocation": "1282:11:120",
                  "nodeType": "VariableDeclaration",
                  "scope": 21683,
                  "src": "1277:16:120",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 21672,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1277:4:120",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1276:18:120"
            },
            "returnParameters": {
              "id": 21677,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1314:0:120"
            },
            "scope": 21756,
            "src": "1254:103:120",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "baseFunctions": [
              16323
            ],
            "body": {
              "id": 21692,
              "nodeType": "Block",
              "src": "1485:24:120",
              "statements": [
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 21689,
                      "name": "_farm",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        21730
                      ],
                      "referencedDeclaration": 21730,
                      "src": "1495:5:120",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 21690,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1495:7:120",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 21691,
                  "nodeType": "ExpressionStatement",
                  "src": "1495:7:120"
                }
              ]
            },
            "documentation": {
              "id": 21684,
              "nodeType": "StructuredDocumentation",
              "src": "1393:51:120",
              "text": "@notice Public function for farming Want token."
            },
            "functionSelector": "36e9332d",
            "id": 21693,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 21687,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 21686,
                  "name": "nonReentrant",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 1938,
                  "src": "1472:12:120"
                },
                "nodeType": "ModifierInvocation",
                "src": "1472:12:120"
              }
            ],
            "name": "farm",
            "nameLocation": "1458:4:120",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 21685,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1462:2:120"
            },
            "returnParameters": {
              "id": 21688,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1485:0:120"
            },
            "scope": 21756,
            "src": "1449:60:120",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              20834
            ],
            "body": {
              "id": 21729,
              "nodeType": "Block",
              "src": "1683:636:120",
              "statements": [
                {
                  "condition": {
                    "id": 21698,
                    "name": "isLPFarmable",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 21671,
                    "src": "1697:12:120",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 21728,
                  "nodeType": "IfStatement",
                  "src": "1693:620:120",
                  "trueBody": {
                    "id": 21727,
                    "nodeType": "Block",
                    "src": "1711:602:120",
                    "statements": [
                      {
                        "assignments": [
                          21700
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 21700,
                            "mutability": "mutable",
                            "name": "wantBal",
                            "nameLocation": "1791:7:120",
                            "nodeType": "VariableDeclaration",
                            "scope": 21727,
                            "src": "1783:15:120",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 21699,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "1783:7:120",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 21710,
                        "initialValue": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "id": 21707,
                                  "name": "this",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4294967268,
                                  "src": "1867:4:120",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_VaultStandardAMM_$21756",
                                    "typeString": "contract VaultStandardAMM"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_contract$_VaultStandardAMM_$21756",
                                    "typeString": "contract VaultStandardAMM"
                                  }
                                ],
                                "id": 21706,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "1859:7:120",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 21705,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "1859:7:120",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 21708,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "1859:13:120",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "expression": {
                              "arguments": [
                                {
                                  "id": 21702,
                                  "name": "wantAddress",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 19847,
                                  "src": "1819:11:120",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "id": 21701,
                                "name": "IERC20Upgradeable",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2635,
                                "src": "1801:17:120",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_IERC20Upgradeable_$2635_$",
                                  "typeString": "type(contract IERC20Upgradeable)"
                                }
                              },
                              "id": 21703,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "1801:30:120",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IERC20Upgradeable_$2635",
                                "typeString": "contract IERC20Upgradeable"
                              }
                            },
                            "id": 21704,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "balanceOf",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 2574,
                            "src": "1801:40:120",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                              "typeString": "function (address) view external returns (uint256)"
                            }
                          },
                          "id": 21709,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1801:85:120",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "1783:103:120"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 21715,
                              "name": "farmContractAddress",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 19855,
                              "src": "2084:19:120",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 21716,
                              "name": "wantBal",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 21700,
                              "src": "2121:7:120",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "arguments": [
                                {
                                  "id": 21712,
                                  "name": "wantAddress",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 19847,
                                  "src": "2032:11:120",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "id": 21711,
                                "name": "IERC20Upgradeable",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2635,
                                "src": "2014:17:120",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_IERC20Upgradeable_$2635_$",
                                  "typeString": "type(contract IERC20Upgradeable)"
                                }
                              },
                              "id": 21713,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "2014:30:120",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IERC20Upgradeable_$2635",
                                "typeString": "contract IERC20Upgradeable"
                              }
                            },
                            "id": 21714,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "safeIncreaseAllowance",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 2797,
                            "src": "2014:52:120",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$2635_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20Upgradeable_$2635_$",
                              "typeString": "function (contract IERC20Upgradeable,address,uint256)"
                            }
                          },
                          "id": 21717,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2014:128:120",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 21718,
                        "nodeType": "ExpressionStatement",
                        "src": "2014:128:120"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 21723,
                              "name": "pid",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 19831,
                              "src": "2289:3:120",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 21724,
                              "name": "wantBal",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 21700,
                              "src": "2294:7:120",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "arguments": [
                                {
                                  "id": 21720,
                                  "name": "farmContractAddress",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 19855,
                                  "src": "2260:19:120",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "id": 21719,
                                "name": "IAMMFarm",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 14085,
                                "src": "2251:8:120",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_IAMMFarm_$14085_$",
                                  "typeString": "type(contract IAMMFarm)"
                                }
                              },
                              "id": 21721,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "2251:29:120",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IAMMFarm_$14085",
                                "typeString": "contract IAMMFarm"
                              }
                            },
                            "id": 21722,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "deposit",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 14062,
                            "src": "2251:37:120",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_nonpayable$_t_uint256_$_t_uint256_$returns$__$",
                              "typeString": "function (uint256,uint256) external"
                            }
                          },
                          "id": 21725,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2251:51:120",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 21726,
                        "nodeType": "ExpressionStatement",
                        "src": "2251:51:120"
                      }
                    ]
                  }
                }
              ]
            },
            "documentation": {
              "id": 21694,
              "nodeType": "StructuredDocumentation",
              "src": "1515:128:120",
              "text": "@notice Internal function for farming Want token. Responsible for staking Want token in a MasterChef/MasterApe-like contract"
            },
            "id": 21730,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_farm",
            "nameLocation": "1657:5:120",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 21696,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "1674:8:120"
            },
            "parameters": {
              "id": 21695,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1662:2:120"
            },
            "returnParameters": {
              "id": 21697,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1683:0:120"
            },
            "scope": 21756,
            "src": "1648:671:120",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "baseFunctions": [
              20839
            ],
            "body": {
              "id": 21748,
              "nodeType": "Block",
              "src": "2615:180:120",
              "statements": [
                {
                  "condition": {
                    "id": 21737,
                    "name": "isLPFarmable",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 21671,
                    "src": "2629:12:120",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 21747,
                  "nodeType": "IfStatement",
                  "src": "2625:164:120",
                  "trueBody": {
                    "id": 21746,
                    "nodeType": "Block",
                    "src": "2643:146:120",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 21742,
                              "name": "pid",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 19831,
                              "src": "2764:3:120",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 21743,
                              "name": "_wantAmt",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 21733,
                              "src": "2769:8:120",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "arguments": [
                                {
                                  "id": 21739,
                                  "name": "farmContractAddress",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 19855,
                                  "src": "2734:19:120",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "id": 21738,
                                "name": "IAMMFarm",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 14085,
                                "src": "2725:8:120",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_IAMMFarm_$14085_$",
                                  "typeString": "type(contract IAMMFarm)"
                                }
                              },
                              "id": 21740,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "2725:29:120",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IAMMFarm_$14085",
                                "typeString": "contract IAMMFarm"
                              }
                            },
                            "id": 21741,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "withdraw",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 14069,
                            "src": "2725:38:120",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_nonpayable$_t_uint256_$_t_uint256_$returns$__$",
                              "typeString": "function (uint256,uint256) external"
                            }
                          },
                          "id": 21744,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2725:53:120",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 21745,
                        "nodeType": "ExpressionStatement",
                        "src": "2725:53:120"
                      }
                    ]
                  }
                }
              ]
            },
            "documentation": {
              "id": 21731,
              "nodeType": "StructuredDocumentation",
              "src": "2325:232:120",
              "text": "@notice Internal function for unfarming Want token. Responsible for unstaking Want token from MasterChef/MasterApe contracts\n @param _wantAmt the amount of Want tokens to withdraw. If 0, will only harvest and not withdraw"
            },
            "id": 21749,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_unfarm",
            "nameLocation": "2571:7:120",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 21735,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "2606:8:120"
            },
            "parameters": {
              "id": 21734,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 21733,
                  "mutability": "mutable",
                  "name": "_wantAmt",
                  "nameLocation": "2587:8:120",
                  "nodeType": "VariableDeclaration",
                  "scope": 21749,
                  "src": "2579:16:120",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 21732,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2579:7:120",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2578:18:120"
            },
            "returnParameters": {
              "id": 21736,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2615:0:120"
            },
            "scope": 21756,
            "src": "2562:233:120",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "baseFunctions": [
              16470
            ],
            "documentation": {
              "id": 21750,
              "nodeType": "StructuredDocumentation",
              "src": "2831:304:120",
              "text": "@notice Fetches the pending rewards from the underlying protocol's MasterChef contract\n @dev Every protocol has a different function name for this, so the implementing contract must conform to this abstraction\n @return pendingRewards The quantity of rewards tokens available for harvest"
            },
            "functionSelector": "6b307125",
            "id": 21755,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "pendingFarmRewards",
            "nameLocation": "3149:18:120",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 21751,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3167:2:120"
            },
            "returnParameters": {
              "id": 21754,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 21753,
                  "mutability": "mutable",
                  "name": "pendingRewards",
                  "nameLocation": "3207:14:120",
                  "nodeType": "VariableDeclaration",
                  "scope": 21755,
                  "src": "3199:22:120",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 21752,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3199:7:120",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3198:24:120"
            },
            "scope": 21756,
            "src": "3140:83:120",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          }
        ],
        "scope": 21781,
        "src": "432:2793:120",
        "usedErrors": []
      },
      {
        "absolutePath": "project:/contracts/interfaces/PancakeSwap/IMasterChef.sol",
        "file": "../interfaces/PancakeSwap/IMasterChef.sol",
        "id": 21757,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 21781,
        "sourceUnit": 13104,
        "src": "3227:51:120",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 21758,
              "name": "VaultStandardAMM",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 21756,
              "src": "3305:16:120"
            },
            "id": 21759,
            "nodeType": "InheritanceSpecifier",
            "src": "3305:16:120"
          }
        ],
        "canonicalName": "PCS_ZOR_BNB",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 21780,
        "linearizedBaseContracts": [
          21780,
          21756,
          20840,
          1885,
          1944,
          571,
          3169,
          1774,
          16471,
          16339
        ],
        "name": "PCS_ZOR_BNB",
        "nameLocation": "3290:11:120",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "baseFunctions": [
              21755
            ],
            "body": {
              "id": 21778,
              "nodeType": "Block",
              "src": "3412:101:120",
              "statements": [
                {
                  "expression": {
                    "id": 21776,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 21765,
                      "name": "pendingRewards",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 21763,
                      "src": "3422:14:120",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 21770,
                          "name": "pid",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 19831,
                          "src": "3487:3:120",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "arguments": [
                            {
                              "id": 21773,
                              "name": "this",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4294967268,
                              "src": "3500:4:120",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_PCS_ZOR_BNB_$21780",
                                "typeString": "contract PCS_ZOR_BNB"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_contract$_PCS_ZOR_BNB_$21780",
                                "typeString": "contract PCS_ZOR_BNB"
                              }
                            ],
                            "id": 21772,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "3492:7:120",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 21771,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "3492:7:120",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 21774,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3492:13:120",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "expression": {
                          "arguments": [
                            {
                              "id": 21767,
                              "name": "farmContractAddress",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 19855,
                              "src": "3454:19:120",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 21766,
                            "name": "IPCSMasterChef",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 13103,
                            "src": "3439:14:120",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_contract$_IPCSMasterChef_$13103_$",
                              "typeString": "type(contract IPCSMasterChef)"
                            }
                          },
                          "id": 21768,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3439:35:120",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IPCSMasterChef_$13103",
                            "typeString": "contract IPCSMasterChef"
                          }
                        },
                        "id": 21769,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "pendingCake",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 13059,
                        "src": "3439:47:120",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_external_view$_t_uint256_$_t_address_$returns$_t_uint256_$",
                          "typeString": "function (uint256,address) view external returns (uint256)"
                        }
                      },
                      "id": 21775,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "3439:67:120",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "3422:84:120",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 21777,
                  "nodeType": "ExpressionStatement",
                  "src": "3422:84:120"
                }
              ]
            },
            "functionSelector": "6b307125",
            "id": 21779,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "pendingFarmRewards",
            "nameLocation": "3337:18:120",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 21761,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "3370:8:120"
            },
            "parameters": {
              "id": 21760,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3355:2:120"
            },
            "returnParameters": {
              "id": 21764,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 21763,
                  "mutability": "mutable",
                  "name": "pendingRewards",
                  "nameLocation": "3396:14:120",
                  "nodeType": "VariableDeclaration",
                  "scope": 21779,
                  "src": "3388:22:120",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 21762,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3388:7:120",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3387:24:120"
            },
            "scope": 21780,
            "src": "3328:185:120",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 21781,
        "src": "3281:234:120",
        "usedErrors": []
      }
    ],
    "src": "33:3483:120"
  },
  "compiler": {
    "name": "solc",
    "version": "0.8.10+commit.fc410830.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.11",
  "updatedAt": "2023-02-22T13:49:21.027Z",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "depositWantToken(uint256)": {
        "params": {
          "_wantAmt": "amount of underlying token to deposit/stake"
        },
        "returns": {
          "sharesAdded": "uint256 Number of shares added"
        }
      },
      "exchangeUSDForWantToken(uint256,uint256)": {
        "params": {
          "_amountUSD": "Amount of USD to exchange",
          "_maxMarketMovementAllowed": "Slippage (990 = 1%)"
        },
        "returns": {
          "wantObtained": "The amount of Want token returned"
        }
      },
      "exchangeWantTokenForUSD(uint256,uint256)": {
        "params": {
          "_amount": "Amount of want to exchange",
          "_maxMarketMovementAllowed": "Slippage (990 = 1%)"
        },
        "returns": {
          "usdObtained": "The amount of USD token returned"
        }
      },
      "inCaseTokensGetStuck(address,uint256,address)": {
        "params": {
          "_amount": "The amount of the tokens to transfer",
          "_to": "The address to transfer tokens to",
          "_token": "Address of the ERC20 token to transfer"
        }
      },
      "initialize(address,(((uint256,bool),(address,address,address,address,address,address,address,address,address,address,address,address,address,address,address,address,address),(address[],address[],address[],address[],address[],address[],address[],address[],address[]),(uint256,uint256,uint256,uint256,uint256),(address,address,address,address,address,address),uint256),bool))": {
        "params": {
          "_initValue": "A VaultStandardAMMInit struct with all constructor params",
          "_timelockOwner": "The designated timelock controller address to act as owner"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "pendingFarmRewards()": {
        "details": "Every protocol has a different function name for this, so the implementing contract must conform to this abstraction",
        "returns": {
          "pendingRewards": "The quantity of rewards tokens available for harvest"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setFeeSettings(uint256,uint256,uint256,uint256,uint256)": {
        "params": {
          "_buyBackRate": "Buy back rate fee numerator",
          "_controllerFee": "Controller fee numerator",
          "_entranceFeeFactor": "Entrance fee numerator (higher means smaller percentage)",
          "_revShareRate": "Rev share rate fee numerator",
          "_withdrawFeeFactor": "Withdrawal fee numerator (higher means smaller percentage)"
        }
      },
      "setGov(address)": {
        "params": {
          "_govAddress": "The new gov address"
        }
      },
      "setOnlyGov(bool)": {
        "params": {
          "_onlyGov": "whether onlyGov should be enforced"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawWantToken(uint256)": {
        "params": {
          "_shares": "The number of shares to withdraw"
        },
        "returns": {
          "wantRemoved": "The amount of Want tokens withdrawn"
        }
      }
    },
    "title": "VaultStandardAMM: abstract base class for all PancakeSwap style AMM contracts. Maximizes yield in AMM.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "depositWantToken(uint256)": {
        "notice": "Receives new deposits from user"
      },
      "earn()": {
        "notice": "The main compounding (earn) function. Reinvests profits since the last earn event."
      },
      "exchangeUSDForWantToken(uint256,uint256)": {
        "notice": "Converts USD to Want token and delivers back to this contract"
      },
      "exchangeWantTokenForUSD(uint256,uint256)": {
        "notice": "Converts Want token to USD and delivers back to this contract"
      },
      "farm()": {
        "notice": "Public function for farming Want token."
      },
      "inCaseTokensGetStuck(address,uint256,address)": {
        "notice": "Safely transfer ERC20 tokens stuck in this contract to a specified address"
      },
      "initialize(address,(((uint256,bool),(address,address,address,address,address,address,address,address,address,address,address,address,address,address,address,address,address),(address[],address[],address[],address[],address[],address[],address[],address[],address[]),(uint256,uint256,uint256,uint256,uint256),(address,address,address,address,address,address),uint256),bool))": {
        "notice": "Upgradeable constructor"
      },
      "pause()": {
        "notice": "Pause contract"
      },
      "pendingFarmRewards()": {
        "notice": "Fetches the pending rewards from the underlying protocol's MasterChef contract"
      },
      "setFeeSettings(uint256,uint256,uint256,uint256,uint256)": {
        "notice": "Configure key fee parameters"
      },
      "setGov(address)": {
        "notice": "Set governor address"
      },
      "setOnlyGov(bool)": {
        "notice": "Set onlyGov property"
      },
      "unpause()": {
        "notice": "Unpause contract"
      },
      "withdrawWantToken(uint256)": {
        "notice": "Fully withdraw Want tokens from the Farm contract (100% withdrawals only)"
      }
    },
    "version": 1
  }
}